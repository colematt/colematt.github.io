@inproceedings{cole2022simplex,
  title       = {Simplex: Repurposing Intel Memory Protection Extensions for Secure Storage},
  author      = {Cole, Matthew and Prakash, Aravind},
  year        = 2022,
  booktitle   = {Secure IT Systems},
  publisher   = {Springer International Publishing},
  address     = {Cham},
  pages       = {215--233},
  isbn        = {978-3-031-22295-5},
  editor      = {Reiser, Hans P. and Kyas, Marcel},
  abstract    = {The last few decades have seen several hardware-level features to enhance security, but due to security, performance, and/or usability issues these features have attracted steady criticism. One such feature is the Intel Memory Protection Extensions (MPX), an instruction set architecture extension promising spatial memory safety at a lower performance cost due to hardware-accelerated bounds checking. However, recent investigations into MPX have found that is neither as performant, accurate, nor precise as software-based spatial memory safety. Given its ubiquity, we argue that it provides an under-utilized hardware resource that can be salvaged for security purposes. We propose Simplex, an open-sourced library that re-purposes MPX registers as general purpose registers. Using Simplex, we demonstrate securely storing sensitive information directly on the hardware (e.g. encryption keys). We evaluate for performance, and find that deployment is feasible in all but the most performance-intensive code, with amortized performance overhead as low as about 1{\%}.}
}
@misc{demicco2022generic,
  title       = {Generic Tagging for RISC-V Binaries},
  author      = {David Demicco and Matthew Cole and Gokturk Yuksek and Ravi Theja Gollapudi and Aravind Prakash and Kanad Ghose and Zerksis Umrigar},
  year        = 2022,
  doi         = {10.48550/arXiv.2212.05614},
  eprint      = {2212.05614},
  archiveprefix = {arXiv},
  primaryclass = {cs.CR}
}
@inproceedings{demicco2022security,
  title       = {A Security Analysis of Labeling-Based Control-Flow Integrity Schemes},
  author      = {Demicco, David and Cole, Matthew and Wang, Shengdun and Prakash, Aravind},
  year        = 2022,
  month       = {Dec},
  booktitle   = {2022 IEEE 29th International Conference on High Performance Computing, Data and Analytics Workshop (HiPCW)},
  volume      = {},
  number      = {},
  pages       = {47--52},
  doi         = {10.1109/HiPCW57629.2022.00011},
  issn        = {},
  abstract    = {Secure and transparent policy enforcement by a cloud provider is crucial in cloud infrastructures. Particularly, enforcement of control-flow integrity (CFI) policy has been widely accepted for stopping software-induced attacks. Using low-level hardware metadata to encode CFI policy is a fairly recent development. Besides moving enforcement out of the software and into the hardware for performance benefit, tagging metadata also offers other benefits in the precision of defenses. We evaluate several different metadata layouts for CFI policy enforcement, and examine the layouts' effects on the number of valid forward edges remaining in a RISC-V binary after policy enforcement. Additionally we look at related work in tag-based tools that provide CFI policy enforcement in order to get a sense of their performance and the design trade-offs they make. We evaluate our policy and the related works in terms of space and precision trade-offs for forward- and backward-edge CFI, finding that some trade-offs have a higher impact on the number of remaining forward edges, notably return address protection. Additionally, we report that existing backward edge protections can be highly effective, reducing the number of remaining backward edges in a protected binary to an average of 0.034% over an equivalent coarse-grained CFI.},
  keywords    = {}
}
@inproceedings{gollapudi2023control,
  title       = {Control Flow and Pointer Integrity Enforcement in a Secure Tagged Architecture},
  author      = {Gollapudi, Ravi Theja and Yuksek, Gokturk and Demicco, David and Cole, Matthew and Kothari, Gaurav and Kulkarni, Rohit and Zhang, Xin and Ghose, Kanad and Prakash, Aravind and Umrigar, Zerksis},
  year        = 2023,
  month       = {May},
  booktitle   = {2023 IEEE Symposium on Security and Privacy (SP)},
  volume      = {},
  number      = {},
  pages       = {2974--2989},
  doi         = {10.1109/sp46215.2023.10179416},
  issn        = {2375-1207},
  abstract    = {Control flow attacks exploit software vulnerabilities to divert the flow of control into unintended paths to ultimately execute attack code. This paper explores the use of instruction and data tagging as a general means of thwarting such control flow attacks, including attacks that rely on violating pointer integrity. Using specific types of narrow-width data tags along with narrow-width instruction tags embedded within the binary facilitates the security policies required to protect against such attacks, leading to a practically viable solution. Co-locating instruction tags close to their corresponding instructions within cache lines eliminates the need for separate mechanisms for instruction tag accesses. Information gleaned from the analysis phase of a compiler is augmented and used to generate the instruction and data tags. A full-stack implementation that consists of a modified LLVM compiler, modified Linux OS support for tags and a FPGA-implemented CPU hardware prototype for enforcing CFI, data pointer and code pointer integrity is demonstrated. With a modest hardware enhancement, the execution time of benchmark applications on the prototype system is shown to be limited to low, single-digit percentages of a baseline system without tagging.},
  keywords    = {}
}
@inproceedings{quach2017supplementing,
  title       = {Supplementing Modern Software Defenses with Stack-Pointer Sanity},
  author      = {Quach, Anh and Cole, Matthew and Prakash, Aravind},
  year        = 2017,
  booktitle   = {Proceedings of the 33rd Annual Computer Security Applications Conference},
  location    = {Orlando, FL, USA},
  publisher   = {Association for Computing Machinery},
  address     = {New York, NY, USA},
  series      = {Acsac '17},
  pages       = {116â€“127},
  doi         = {10.1145/3134600.3134641},
  isbn        = 9781450353458,
  url         = {https://doi.org/10.1145/3134600.3134641},
  abstract    = {The perpetual cat-and-mouse game between attackers and software defenders has highlighted the need for strong and robust security. With performance as a key concern, most modern defenses focus on control-flow integrity (CFI), a program property that requires runtime execution of a program to adhere to a statically determined control-flow graph (CFG). Despite its success in preventing traditional return-oriented programming (ROP), CFI is known to be ineffective against modern attacks that adhere to a statically recovered CFG (e.g., COOP).This paper introduces stack-pointer integrity (SPI) as a means to supplement CFI and other modern defense techniques. Due to its ability to influence indirect control targets, stack pointer is a key artifact in attacks. We define SPI as a property comprising of two key sub-properties - Stack Localization and Stack Conservation - and implement a LLVM-based compiler prototype codenamed SPIglass that enforces SPI. We demonstrate a low implementation overhead and incremental deployability, two of the most desirable features for practical deployment. Our performance experiments show that the overhead of our defense is low in practice. We opensource SPIglass for the benefit of the community.},
  numpages    = 12
}
